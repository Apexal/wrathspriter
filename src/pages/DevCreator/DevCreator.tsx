import { Action } from "history";
import { downloadCharacter } from "../../utils/download";
import React, { useState } from "react";
import HelpButton from "../../components/HelpButton";
import { emptyCharacter } from "../../constants";
import { SoundEffect } from "../../interfaces/action";
import { AnimationFrame } from "../../interfaces/animations";
import { Character } from "../../interfaces/character";
import { Vector2 } from "../../interfaces/index";
import { DevPreview } from "./DevPreview";
import { setConstantValue } from "typescript";

enum Programs {
    None = -1,
    ComputerScience = 0,
    Mathematics = 1,
    English = 2,
    Management = 3,
}

export interface DevProps {
    character: Character
}

export function DevCreator() {

    const [name, setName] = useState("");
    const [backstory, setBackstory] =  useState("");
    const [value, setValue] = useState({});
    let props: DevProps = {
        character: emptyCharacter
    }
    
    let major: Programs = Programs.None;
    let minor: Programs = Programs.None;

    // let character: Character = emptyCharacter;

    function createCharacter(event: React.SyntheticEvent) {
        event.preventDefault();

        let actions: Action[] = [];

        props.character.name = name;
        props.character.backstory = backstory;
        props.character.major = {
            id: Programs[major],
            name: Programs[major],
            backstory: "generated by the development character creator",
            actionTemplates: emptyCharacter.actions
        }

        props.character.minor = {
            id: Programs[minor],
            name: Programs[minor],
            backstory: "generated by the development character creator",
            actionTemplates: emptyCharacter.actions
        }

        downloadCharacter(props.character);
    }

    function setMajor(event: React.ChangeEvent<HTMLSelectElement>) {
        // Convert from string to enum
        let id: number = -1;
        if (event.target.selectedOptions[0] != undefined)
            id = Number(event.target.selectedOptions[0].dataset.id);

        // Update the major field
        major = id as Programs;
    }

    function setMinor(event: React.ChangeEvent<HTMLSelectElement>) {
        let id: number = -1;
        if (event.target.selectedOptions[0] != undefined)
            id = Number(event.target.selectedOptions[0].dataset.id);

        // Update the minor field
        minor = id as Programs;
    }

    function setSounds(event: React.ChangeEvent<HTMLInputElement>, area: SoundEffect[], areaText: string) {
        if (event.target.files == null) return;

        for (let i = 0; i < event.target.files.length; i++) {
            if (event.target.files[i].type != "audio/mpeg") { showUploadFail(); continue; }
            else {
                // Read the file
                let name = event.target.files[i].name;

                let fileList = document.getElementById(areaText + "-sounds-list");
                if (fileList != null) {
                    if (fileList.textContent == "...") fileList.textContent = name;
                    else fileList.textContent += ", " + name;
                }

                let reader: FileReader = new FileReader();
                reader.addEventListener("load", () => {

                    if (!(reader.result instanceof ArrayBuffer)) return;
                    let base64: string = arrayBufferToBase64(reader.result);

                    area.push({
                        name: name,
                        base64EncodedAudio: base64
                    });
                })
                reader.readAsArrayBuffer(event.target.files[i]);
            }
        }

    }

    function setFrames(event: React.ChangeEvent<HTMLInputElement>, area: AnimationFrame[], areaText: string) {
        if (event.target.files == null) return;

        for (let i = 0; i < event.target.files.length; i++) {
            if (!event.target.files[i].type.includes("image/")) { showUploadFail(); continue; }
            else {
                // Read the file
                let name = event.target.files[i].name;

                let fileList = document.getElementById(areaText + "-anim-list");
                if (fileList != null) {
                    if (fileList.textContent == "...") fileList.textContent = name;
                    else fileList.textContent += ", " + name;
                }

                let reader: FileReader = new FileReader();
                reader.addEventListener("load", () => {
                    if (typeof reader.result != "string") return;

                    let base64 = reader.result.substring(reader.result.indexOf(',') + 1);
                    let test: Vector2 = {
                        x: 0,
                        y: 0
                    };

                    area.push({
                        base64EncodedPoseImage: null,
                        base64EncodedImage: base64,
                        hitCollider: {
                            isEnabled: false,
                            size: null,
                            position: null
                        },
                        bodyCollider: {
                            size: test,
                            position: test
                        },
                        durationInS: 0.2
                    });
                    setValue({});
                })
                reader.readAsDataURL(event.target.files[i]);
            }
        }
    }

    // Converts an array buffer into base64
    function arrayBufferToBase64(buffer: ArrayBuffer) {
        return btoa(new Uint8Array(buffer).reduce((data, byte) => data + String.fromCharCode(byte), ''))
    }

    function showUploadFail() {
        console.log("the upload failed");
    }

    return (
        <section id="dev-creator-page" className="sectionPage">
            <HelpButton heading="Test Characters">
                <p>This page is for creating characters to test out Wrathspriter's saving/exporting formats as well as locations.</p>
                <br />
                <p>Currently, characters are saved with IndexedDB, which should allow for easy access with ample space to save content.</p>
                <br />
                <p>Characters are saved as a JSON entry in IndexedDB, following the format from character.ts</p>
                <br />
                <a className="button is-responsive" href="https://https://github.com/Apexal/wrathspriter/issues/24" target="_blank" rel="noreferrer" >
                    GitHub Issue
                </a>
            </HelpButton>
            <header className="container has-text-centered">
                <h1 className="is-uppercase is-size-1 has-text-weight-bold">Development Character Creator</h1>
                <h2 className="is-size-5">
                    Can you keep this page a secret?
                </h2>
                <form onSubmit={(e) => { createCharacter(e); }}>
                    <div className="field">
                        <div className="control">
                            <input className="input" type="name" placeholder="Name" onChange={(e) => { setName(e.target.value); }}></input>
                        </div>
                    </div>
                    <div className="field">
                        <div className="control">
                            <input className="input" type="name" placeholder="Backstory" onChange={(e) => { setBackstory(e.target.value); }}></input>
                        </div>
                    </div>
                    <div className="field">
                        <div className="control">
                            <div className="select">
                                <select defaultValue={0} onChange={(e) => { setMajor(e); }}>
                                    <option data-id="-1">Major</option>
                                    <option data-id="0">Computer Science</option>
                                    <option data-id="1">Mathematics</option>
                                    <option data-id="2">English</option>
                                    <option data-id="3">Management</option>
                                </select>
                            </div>
                        </div>
                    </div>
                    <div className="field">
                        <div className="control">
                            <div className="select">
                                <select defaultValue={0} onChange={(e) => { setMinor(e); }}>
                                    <option data-id="-1">Minor</option>
                                    <option data-id="0">Computer Science</option>
                                    <option data-id="1">Mathematics</option>
                                    <option data-id="2">English</option>
                                    <option data-id="3">Management</option>
                                </select>
                            </div>
                        </div>
                    </div>
                    <div className = "is-flex is-justify-content-center is-flex-direction-column">
                        <div className="file has-name is-centered">
                            <label className="file-label ">
                                <input onChange = { (e) => { setSounds(e, props.character.stateSoundEffects.hurt, "hurt"); } } className="file-input" type="file" name="hurt sound" accept = "audio/mpeg" multiple/>
                                    <span className="file-cta">
                                        <span className="file-label">
                                            Hurt Sound(s)
                                        </span>
                                    </span>
                                    <span className="file-name" id = "hurt-sounds-list">
                                            ...
                                    </span>
                            </label>
                        </div>
                        <div className="file has-name is-centered">
                            <label className="file-label">
                                <input onChange = { (e) => { setSounds(e, props.character.stateSoundEffects.enter, "enter"); } } className="file-input" type="file" name="enter sound" accept = "audio/mpeg" multiple/>
                                    <span className="file-cta">
                                        <span className="file-label">
                                            Enter Sound(s)
                                        </span>
                                    </span>
                                    <span className="file-name" id="enter-sounds-list">
                                        ...
                                    </span>
                            </label>
                        </div>
                        <div className="file has-name is-centered">
                            <label className="file-label">
                                <input onChange = { (e) => { setSounds(e, props.character.stateSoundEffects.win, "win"); } } className="file-input" type="file" name="win sound" accept = "audio/mpeg" multiple/>
                                    <span className="file-cta">
                                        <span className="file-label">
                                            Win Sound(s)
                                        </span>
                                    </span>
                                    <span className="file-name" id = "win-sounds-list">
                                        ...
                                    </span>
                            </label>
                        </div>
                        <div className="file has-name is-centered">
                            <label className="file-label">
                                <input onChange = { (e) => { setSounds(e, props.character.stateSoundEffects.lose, "lose"); } } className="file-input" type="file" name="lose sound" accept = "audio/mpeg" multiple/>
                                    <span className="file-cta">
                                        <span className="file-label">
                                            Lose Sound(s)
                                        </span>
                                    </span>
                                    <span className="file-name" id ="lose-sounds-list">
                                        ...
                                    </span>
                            </label>
                        </div>
                    </div>
                    <br/>
                    <div id = "animation-images" className = "is-flex is-justify-content-center is-flex-direction-column">
                        <div className="file has-name is-centered">
                                <label className="file-label">
                                    <input onChange = { (e) => { setFrames(e, props.character.stateAnimations.idle, "idle"); } } className="file-input" type="file" name="idle anim" accept = "image/*" multiple/>
                                        <span className="file-cta">
                                            <span className="file-label">
                                                Idle Frame(s)
                                            </span>
                                        </span>
                                        <span className="file-name" id ="idle-anim-list">
                                            ...
                                        </span>
                                </label>
                            </div>
                            <DevPreview props = {props} animationName = "idle"/>
                            <div className="file has-name is-centered">
                                <label className="file-label">
                                    <input onChange = { (e) => { setFrames(e, props.character.stateAnimations.walk, "walk"); } } className="file-input" type="file" name="walk anim" accept = "image/*" multiple/>
                                        <span className="file-cta">
                                            <span className="file-label">
                                                Walk Frame(s)
                                            </span>
                                        </span>
                                        <span className="file-name" id ="walk-anim-list">
                                            ...
                                        </span>
                                </label>
                            </div>
                            <DevPreview props = {props} animationName = "walk"/>
                            <div className="file has-name is-centered">
                                <label className="file-label">
                                    <input onChange = { (e) => { setFrames(e, props.character.stateAnimations.dash, "dash"); } } className="file-input" type="file" name="dash anim" accept = "image/*" multiple/>
                                        <span className="file-cta">
                                            <span className="file-label">
                                                Dash Frame(s)
                                            </span>
                                        </span>
                                        <span className="file-name" id ="dash-anim-list">
                                            ...
                                        </span>
                                </label>
                            </div>
                            <div className="file has-name is-centered">
                                <label className="file-label">
                                    <input onChange = { (e) => { setFrames(e, props.character.stateAnimations.jump, "jump"); } } className="file-input" type="file" name="jump anim" accept = "image/*" multiple/>
                                        <span className="file-cta">
                                            <span className="file-label">
                                                Jump Frame(s)
                                            </span>
                                        </span>
                                        <span className="file-name" id ="jump-anim-list">
                                            ...
                                        </span>
                                </label>
                            </div>
                            <div className="file has-name is-centered">
                                <label className="file-label">
                                    <input onChange = { (e) => { setFrames(e, props.character.stateAnimations.crouch, "crouch"); } } className="file-input" type="file" name="crouch anim" accept = "image/*" multiple/>
                                        <span className="file-cta">
                                            <span className="file-label">
                                                Crouch Frame(s)
                                            </span>
                                        </span>
                                        <span className="file-name" id ="crouch-anim-list">
                                            ...
                                        </span>
                                </label>
                            </div>
                            <div className="file has-name is-centered">
                                <label className="file-label">
                                    <input onChange = { (e) => { setFrames(e, props.character.stateAnimations.block, "block"); } } className="file-input" type="file" name="block anim" accept = "image/*" multiple/>
                                        <span className="file-cta">
                                            <span className="file-label">
                                                Block Frame(s)
                                            </span>
                                        </span>
                                        <span className="file-name" id ="block-anim-list">
                                            ...
                                        </span>
                                </label>
                            </div>
                            <div className="file has-name is-centered">
                                <label className="file-label">
                                    <input onChange = { (e) => { setFrames(e, props.character.stateAnimations.grappled, "grappled"); } } className="file-input" type="file" name="grappled anim" accept = "image/*" multiple/>
                                        <span className="file-cta">
                                            <span className="file-label">
                                                Grappled Frame(s)
                                            </span>
                                        </span>
                                        <span className="file-name" id ="grappled-anim-list">
                                            ...
                                        </span>
                                </label>
                            </div>
                            <div className="file has-name is-centered">
                                <label className="file-label">
                                    <input onChange = { (e) => { setFrames(e, props.character.stateAnimations.hurt, "hurt"); } } className="file-input" type="file" name="hurt anim" accept = "image/*" multiple/>
                                        <span className="file-cta">
                                            <span className="file-label">
                                                Hurt Frame(s)
                                            </span>
                                        </span>
                                        <span className="file-name" id ="hurt-anim-list">
                                            ...
                                        </span>
                                </label>
                            </div>
                            <div className="file has-name is-centered">
                                <label className="file-label">
                                    <input onChange = { (e) => { setFrames(e, props.character.stateAnimations.win, "win"); } } className="file-input" type="file" name="win anim" accept = "image/*" multiple/>
                                        <span className="file-cta">
                                            <span className="file-label">
                                                Win Frame(s)
                                            </span>
                                        </span>
                                        <span className="file-name" id ="win-anim-list">
                                            ...
                                        </span>
                                </label>
                            </div>
                            <div className="file has-name is-centered">
                                <label className="file-label">
                                    <input onChange = { (e) => { setFrames(e, props.character.stateAnimations.lose, "lose"); } } className="file-input" type="file" name="lose anim" accept = "image/*" multiple/>
                                        <span className="file-cta">
                                            <span className="file-label">
                                                Lose Frame(s)
                                            </span>
                                        </span>
                                        <span className="file-name" id ="lose-anim-list">
                                            ...
                                        </span>
                                </label>
                            </div>
                    </div>
                    <div className="field is-grouped is-grouped-centered">
                        <p className="control">
                            <button className="button is-primary" type="submit" >
                                Submit
                            </button>
                        </p>
                    </div>
                </form>
            </header>
        </section>
    )
}